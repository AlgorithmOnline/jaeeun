N, M = map(int, input().split())
maps=[]
for k in range(N):
    maps.append(list(map(int, input().split())))
#   (0,0), (0,0), (0,0), (0,0),[0, 0],
shape=[
    [[0, 1], [0, 2], [0, 3],[0, 0]],
[[1, 0], [2, 0], [3, 0],[0, 0]], 
[[0, 1], [1, 0], [1, 1],[0, 0]],
    [[1, 0], [2, 0], [2, 1],[0, 0]], 
[[1, 0], [2, 0], [2, -1],[0, 0]]
    , [[0, 1], [0, 2], [1, 0],[0, 0]], 
    
[[0, 1], [0, 2], [1, 2],[0, 0]],
    [[0, 1], [1, 1], [2, 1],[0, 0]], 
    
[[0, 1], [1, 0], [2, 0],[0, 0]],
    [[0, 1], [0, 2], [-1, 2],[0, 0]], 
[[1, 0], [1, 1], [1, 2],[0, 0]], 
    [[1, 0], [1, 1], [2, 1],[0, 0]], 
[[1, 0], [1, -1], [2, -1],[0, 0]]
    , [[0, 1], [-1, 1], [-1, 2],[0, 0]], 
[[0, 1], [1, 1], [1, 2],[0, 0]],
    [[0, 1], [0, 2], [1, 1],[0, 0]], 
    
[[1, 0], [1, 1], [2, 0],[0, 0]], 
    [[1, 0], [1, -1], [2, 0],[0, 0]], 
[[0, 1], [0, 2], [-1, 1],[0, 0]]]
rr=[]

def bfs(graph, m):
    cost=0
    for s in shape:
        tmp=0
        for h in range(4):

            hNew=[s[h][0]+m[0],s[h][1]+m[1]]
            if  0<=hNew[0]< N and 0<=hNew[1] <M:
                tmp+=graph[hNew[0]][hNew[1]]
            else:


                tmp=0
                break
        if tmp> cost:
            cost= max(tmp, cost)
    return cost

 
answer=0

for k in range(N):

    for ak in range(M):
        answer=max(answer, bfs(maps,[k,ak]) )               
print(answer)                
